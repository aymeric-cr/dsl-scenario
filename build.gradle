buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'gradle.plugin.com.github.jlouns:gradle-cross-platform-exec-plugin:0.5.0'
        classpath 'org.xtext:xtext-gradle-plugin:2.0.8'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1'
    }
}

apply plugin: 'base'
apply plugin: 'com.github.jlouns.cpe'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.sonarqube'

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.4"
    }

    group project.groupId
    version project.FDIT_VERSION + project.BUILD_NUMBER + project.MODE + "-" + project.BUILD_TYPE
}

ext {
    productZipName = 'fdit.zip'
    productRootDir = 'fdit'
    productLocation = "${buildDir}"
    fditVersion = project.FDIT_VERSION + project.BUILD_NUMBER + project.MODE + "-" + project.BUILD_TYPE
    launcherShName = 'fdit.sh'
    launcherBatName = 'fdit.bat'
    jvmMemoryAllocationPool = '6g'
    fditJarLocation = "${project(':fdit-application').buildDir}/jfx/"
    pomName = 'pom-default.xml'
    fditLibLocation = fditJarLocation + "lib/"

    applicationPom = "${project(':fdit-application').buildDir}/poms/$pomName"
    fditJarName = 'fdit.research.' + fditVersion + '.jar'

    launcherShContent = "java -Xms$jvmMemoryAllocationPool -Xmx$jvmMemoryAllocationPool -Dprism.order=sw -jar $fditJarName"
    launcherBatContent = "start javaw -Xms$jvmMemoryAllocationPool -Xmx$jvmMemoryAllocationPool -Dprism.order=sw -jar $fditJarName"
}

task product(type: Zip, dependsOn: [
        'installSharedCommonsArtifact',
        ':fdit-application:jfxJar',
        ':fdit-application:install',
        ':database-atc:install',
        ':metamodel-atc:install',
        ':tools-atc:install',
        ':fdit.ltlcondition.parent:fdit.ltlcondition.ide:install',
        ':fdit.triggcondition.parent:fdit.triggcondition.ide:install',
        ':dsl:fdit.dsl.ide:install',
        ':dsl:fdit.dsl:install',
        ':fdit.ltlcondition.parent:fdit.ltlcondition:install',
        ':fdit.triggcondition.parent:fdit.triggcondition:install',
        ':testMetamodel-atc:install',
        ':testDatabase-atc:install',
        ':testTools-atc:install']) {
    final def launcherShFile = file("$productLocation/$launcherShName")
    final def launcherBatFile = file("$productLocation/$launcherBatName")

    doFirst {
        file("$productLocation").mkdirs()
        launcherShFile.text = "$launcherShContent"
        launcherBatFile.text = "$launcherBatContent"
    }

    doLast {
        launcherShFile.delete()
        launcherBatFile.delete()
    }

    from "$fditJarLocation"
    from launcherShFile
    from launcherBatFile
    include '*'
    include '*/*'
    into "$productRootDir"
    archiveName "$productZipName"
    destinationDir file("$productLocation")
}

clean.doFirst {
    delete "$productLocation"
}

def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"

jacocoTestReport {
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/*.exec')
    classDirectories = project.fileTree(dir: '.', include: '**/build/classes/main/**/*', excludes: ['**/test-tools/**',
                                                                                                    '**/tools/**',
                                                                                                    '**/worldfx/**',
                                                                                                    '**/test-metamodel/**'])
    sourceDirectories = project.fileTree(dir: '.', include: '**/src/main/java/**/*', excludes: ['**/test-tools/**',
                                                                                                '**/tools/**',
                                                                                                '**/worldfx/**',
                                                                                                '**/test-metamodel/**'])
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    task allDeps(type: DependencyReportTask) {}

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    sonarqube {
        properties {
            property "sonar.jacoco.reportPaths", allTestCoverageFile
        }
    }

    test {
        jvmArgs '-Duser.language=en'
        testLogging.showStandardStreams = true
    }

    ext {
        // external libraries
        configuration2Version = '2.0'
        commonsMathVersion = '3.4'
        commonsIoVersion = '2.5'
        commonsLangVersion = '2.6'
        controlsFXVersion = '8.40.12'
        gsonVersion = '2.8.5'
        findBugsVersion = '3.0.1'
        guavaVersion = '27.1-jre'
        h2Version = '1.4.197'
        ikonliVersion = '1.9.0'
        jdom2Version = '2.0.6'
        jdomVersion = '1.1'
        jaxenVersion = '1.1.6'
        jimfsVersion = '1.1'
        libFXVersion = '0.3.0'
        reflectionsVersion = '0.9.10'
        richTextFXVersion = '0.7-M5'
        vecmathVersion = '1.5.2'
        xtextVersion = '2.20.0'
        nettyVersion = '4.1.44.Final'
        jmetroVersion = '8.6.10'
        mapjfxVersion = '1.31.0'
        licenseVersion = "1.0-SNAPSHOT"
        toolsLicenseVersion = "1.0-SNAPSHOT"
        geodesyVersion = "1.1.3"
        kotlinstdlibVersion = '1.3.72'
        kotlinstdlibcommonVersion = '1.3.72'
        guiceVersion = '3.0'
        commonsCliVersion = '1.4'

        // external test libraries
        junitVersion = '4.12'
        xmlunitVersion = '2.5.1'
        mockitoVersion = '1.10.19'
        powermockitoVersion = '1.6.6'
    }

    // force version of dependencies in case of version conflict
    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
            force 'org.eclipse.platform:org.eclipse.equinox.common:3.10.0'
        }
    }

    configurations {
        // FDI-T modules
        application
        database
        dsl
        ltlcondition
        metamodel
        triggcondition
        tools

        // FDI-T test modules
        testDatabase
        testMetamodel
        testTools
    }

    configurations.compile { transitive = false }

    dependencies {
        // FDI-T modules
        application project(':fdit-application')
        metamodel project(':metamodel')
        database project(':database')
        dsl project(':dsl:fdit.dsl.ide')
        ltlcondition project(':fdit.ltlcondition.parent:fdit.ltlcondition.ide')
        triggcondition project(':fdit.triggcondition.parent:fdit.triggcondition.ide')
        tools project(':tools')

        // FDI-T test modules
        testDatabase project(':testDatabase')
        testMetamodel project(':testMetamodel')
        testTools project(':testTools')
    }
}